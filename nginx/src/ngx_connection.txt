struct ngx_listening_s {
    ngx_socket_t        fd;			// 文件描述符，无效时等于-1

    struct sockaddr    *sockaddr;	// 
    socklen_t           socklen;    /* size of sockaddr */
    size_t              addr_text_max_len;	//字符串的最大长度，格式：address:port
    ngx_str_t           addr_text;			//地址：端口的字符串表示

    int                 type;				//socket的类型

    int                 backlog;			//listen的参数，在linux中表示完成队列的长度 #define NGX_LISTEN_BACKLOG  511
    int                 rcvbuf;		//socket fd receive buffer size
    int                 sndbuf;		//socket fd send buffer size
    //--------------------->  在ngx_create_listening()后，只初始化以上的字段。
    /* handler of accepted connection */
    ngx_connection_handler_pt   handler;	// 这里保存了要处理的连接的handler，这个handler最终会设置event的read,write的handler

    void               *servers;  /* array of ngx_http_in_addr_t, for example */

    ngx_log_t           log;
    ngx_log_t          *logp;

    size_t              pool_size;
    /* should be here because of the AcceptEx() preread */
    size_t              post_accept_buffer_size;
    /* should be here because of the deferred accept */
    ngx_msec_t          post_accept_timeout;
	
	ngx_listening_t    *previous;		// 指向旧的cycle中的相同的那个ngx_listening_t
    ngx_connection_t   *connection;		// 

    unsigned            open:1;			//fd无效时设置
    unsigned            remain:1;		//表示是从old cycle中继承过来
    unsigned            ignore:1; 		//在ngx_set_inherited_sockets()失败的时候设置

    unsigned            bound:1;       /* already bound */
    unsigned            inherited:1;   /* inherited from previous process */ //
    unsigned            nonblocking_accept:1;
    unsigned            listen:1;		//socket需要重新调用listen，修改backlog的值
    unsigned            nonblocking:1;
    unsigned            shared:1;    /* shared between threads or processes */
    unsigned            addr_ntop:1;

#if (NGX_HAVE_INET6 && defined IPV6_V6ONLY)
    unsigned            ipv6only:2;
#endif

#if (NGX_HAVE_DEFERRED_ACCEPT)
    unsigned            deferred_accept:1;	// accept deferred
    unsigned            delete_deferred:1;	// 表示删除deferred属性
    unsigned            add_deferred:1;		// 表示添加deferred属性
#ifdef SO_ACCEPTFILTER
    char               *accept_filter;
#endif
#endif

};

typedef enum {
     NGX_ERROR_ALERT = 0,
     NGX_ERROR_ERR,
     NGX_ERROR_INFO,
     NGX_ERROR_IGNORE_ECONNRESET,
     NGX_ERROR_IGNORE_EINVAL
} ngx_connection_log_error_e;


typedef enum {
     NGX_TCP_NODELAY_UNSET = 0,
     NGX_TCP_NODELAY_SET,
     NGX_TCP_NODELAY_DISABLED
} ngx_connection_tcp_nodelay_e;


typedef enum {
     NGX_TCP_NOPUSH_UNSET = 0,
     NGX_TCP_NOPUSH_SET,
     NGX_TCP_NOPUSH_DISABLED
} ngx_connection_tcp_nopush_e;

#define NGX_LOWLEVEL_BUFFERED  0x0f
#define NGX_SSL_BUFFERED       0x01

已分配的ngx_connection_s 存放在cycle->files中
struct ngx_connection_s {
    void               *data; 		//在free的时候用来指向前一个free connection
    ngx_event_t        *read;
    ngx_event_t        *write;

    ngx_socket_t        fd;

    ngx_recv_pt         recv;
    ngx_send_pt         send;
    ngx_recv_chain_pt   recv_chain;
    ngx_send_chain_pt   send_chain;

    ngx_listening_t    *listening;

    off_t               sent;

    ngx_log_t          *log;

    ngx_pool_t         *pool;

    struct sockaddr    *sockaddr;
    socklen_t           socklen;
    ngx_str_t           addr_text;
#if (NGX_SSL)
    ngx_ssl_connection_t  *ssl;
#endif

    struct sockaddr    *local_sockaddr;
    socklen_t           local_socklen;

    ngx_buf_t          *buffer;

    ngx_atomic_uint_t   number;			// 表示第几个连接ngx_connection_counter

    ngx_uint_t          requests;

    unsigned            buffered:8;

    unsigned            log_error:3;     /* ngx_connection_log_error_e */

    unsigned            single_connection:1;
    unsigned            unexpected_eof:1;
    unsigned            timedout:1;
    unsigned            error:1;
    unsigned            destroyed:1;

    unsigned            idle:1;
    unsigned            close:1;

    unsigned            sendfile:1;
    unsigned            sndlowat:1;
	unsigned            tcp_nodelay:2;   /* ngx_connection_tcp_nodelay_e */
    unsigned            tcp_nopush:2;    /* ngx_connection_tcp_nopush_e */

#if (NGX_HAVE_IOCP)
    unsigned            accept_context_updated:1;
#endif

#if (NGX_THREADS)
    ngx_atomic_t        lock;
#endif
};


ngx_listening_t *ngx_create_listening(ngx_conf_t *cf, void *sockaddr,
    socklen_t socklen);
ngx_int_t ngx_set_inherited_sockets(ngx_cycle_t *cycle);
ngx_int_t ngx_open_listening_sockets(ngx_cycle_t *cycle);
void ngx_configure_listening_sockets(ngx_cycle_t *cycle);
void ngx_close_listening_sockets(ngx_cycle_t *cycle);
void ngx_close_connection(ngx_connection_t *c);
ngx_int_t ngx_connection_local_sockaddr(ngx_connection_t *c, ngx_str_t *s,
    ngx_uint_t port);
ngx_int_t ngx_connection_error(ngx_connection_t *c, ngx_err_t err, char *text);

ngx_connection_t *ngx_get_connection(ngx_socket_t s, ngx_log_t *log);
void ngx_free_connection(ngx_connection_t *c);
