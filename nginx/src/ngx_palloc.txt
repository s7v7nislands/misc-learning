/*
 * NGX_MAX_ALLOC_FROM_POOL should be (ngx_pagesize - 1), i.e. 4095 on x86.
 * On Windows NT it decreases a number of locked pages in a kernel.
 */
#define NGX_MAX_ALLOC_FROM_POOL  (ngx_pagesize - 1)

#define NGX_DEFAULT_POOL_SIZE    (16 * 1024)
#define NGX_MIN_POOL_SIZE            \
    (sizeof(ngx_pool_t) + 2 * sizeof(ngx_pool_large_t))


typedef void (*ngx_pool_cleanup_pt)(void *data);

typedef struct ngx_pool_cleanup_s  ngx_pool_cleanup_t;

struct ngx_pool_cleanup_s {
    ngx_pool_cleanup_pt   handler;	//函数钩子
    void                 *data;		//上面函数的参数
    ngx_pool_cleanup_t   *next;
};

typedef struct ngx_pool_large_s  ngx_pool_large_t;

struct ngx_pool_large_s {
    ngx_pool_large_t     *next;
    void                 *alloc;	//指向大块内存区域
};


typedef struct {
    u_char               *last;		//指向pool的未使用的内存
    u_char               *end;		//指向pool的末端 past the end pointer
    ngx_pool_t           *next;		//指向下个poll
    ngx_uint_t            failed;	//记录pool因为内存不足而分配内存失败的次数。超过4次后，不在这个pool及它前面的pool中申请内存
} ngx_pool_data_t;


struct ngx_pool_s {
    ngx_pool_data_t       d;
    size_t                max;		//能从pool中直接分配的最大值；大于此值将从large中分配
    ngx_pool_t           *current;	//指向pool链表中当前用于分配内存的pool
    ngx_chain_t          *chain;	//保存着未使用的ngx_chain_t
    ngx_pool_large_t     *large;	//指向那些大块内存的链表
    ngx_pool_cleanup_t   *cleanup;	//在整个poll收回的时候的cleanup函数
    ngx_log_t            *log;		//日志
};

typedef struct {
    ngx_fd_t              fd;
    u_char               *name;
    ngx_log_t            *log;
} ngx_pool_cleanup_file_t;
作为ngx_pool_cleanup_pt的参数